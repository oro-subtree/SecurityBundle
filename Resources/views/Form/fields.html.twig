{% block oro_acl_access_level_selector_widget %}
    {% set additionalClass = '' %}
    {% if form.parent.parent.vars.privileges_config.view_type is defined and form.parent.parent.vars.privileges_config.view_type != 'grid' %}
        {% set additionalClass = 'span2' %}
    {% endif %}
    <div class="access_level_value {{ additionalClass }}"
         data-identity="{{ identity }}"
         data-selector-id="{{ id }}"
         data-selector-name="{{ full_name }}"
         data-value="{{ value }}"
    >
        <div class="access_level_value_link">
            <a href="javascript:void(0);">
                {% set label = level_label is not defined or level_label is empty ?
                    translation_prefix ~ 'NONE' :
                    translation_prefix ~ level_label
                %}
                {{ label|trans({}, translation_domain) }}
            </a>
            {% set type = type|default('hidden') %}
            {{ block('form_widget_simple') }}
        </div>
        <div class="access_level_value_choice" style="display: none"></div>
    </div>
{% endblock %}

{% block oro_acl_privilege_identity_widget %}
    {% set class = '' %}
    {% if form.parent.vars.privileges_config.view_type is defined and form.parent.vars.privileges_config.view_type != 'grid' %}
        {% set class = 'span8' %}
    {% endif %}

    {{ form_widget(form, {'attr': {'class': class}}) }}
{% endblock %}

{% block oro_acl_label_widget %}
    <strong>{{ value|trans }}</strong>
    {% set type = type|default('hidden') %}
    {{ block('form_widget_simple') }}
{% endblock %}

{% block oro_acl_object_name_widget %}
    {{ form_widget(form.oid) }}
    {{ form_widget(form.name) }}
{% endblock %}

{% block oro_acl_collection_widget %}
    <div data-page-component-module="{{ page_component_module|escape }}" data-page-component-options="{{ page_component_options|json_encode|escape }}">
        {% if privileges_config.view_type == 'grid' %}
            <table class="table table-striped acl-table">
                <tbody>
                <tr>
                    <th>
                        &nbsp;
                    </th>
                    {% set width = ((100/(privileges_config['permissions']|length + 1))-1)|number_format(0) %}
                    {% for field in privileges_config['permissions'] %}
                        <th width="{{ width }}%">
                            {{ field|trans }}
                        </th>
                    {% endfor %}
                </tr>
                {% for child in form %}
                    {{ form_widget(child) }}
                {% endfor %}
                </tbody>
            </table>
        {% else %}
            {% for child in form %}
                <div class="security-row row-fluid">
                    {{ form_widget(child) }}
                </div>
            {% endfor %}
        {% endif %}
    </div>
{% endblock %}

{% block oro_acl_privilege_widget %}
     {% spaceless %}
         <tr {% if form.vars.value.identity.name == "(default)" %}class="default-field"{% endif %}>
             <td>
                 {{ form_widget(form.identity) }}
             </td>
             {{ form_widget(form.permissions) }}
         </tr>
     {% endspaceless %}
{% endblock %}

{% block oro_acl_permission_widget %}
    {{ form_widget(form.accessLevel) }}
    {{ form_widget(form.name) }}
{% endblock %}

{% block oro_acl_permission_collection_widget %}
    {% for field in privileges_config['permissions'] %}
        <td>
            {% for permission in form %}
                {% if permission.vars.value.name == field %}
                    {{ form_widget(permission) }}
                {% endif %}
            {% endfor %}
            &nbsp;
        </td>
    {% endfor %}
{% endblock %}

{% block oro_share_scope_widget %}
    {{ form_widget(form, {'attr': {'class': 'share-scopes'}}) }}
    <script type="text/javascript">
        require(['jquery', 'underscore', 'orotranslation/js/translator', 'oroui/js/modal'], function ($, _, __, Modal) {
            $(function () {
                var anyElementChanged = false;
                $('.share-scopes :checked').each(function (index, el) {
                    $(el).on('change', function (e) {
                        if (!anyElementChanged) {
                            var confirmModal = new Modal({
                                title: __("oro.security.share_scopes.confirmModal.title"),
                                okText: __("oro.security.share_scopes.confirmModal.okText"),
                                cancelText: __("oro.security.share_scopes.confirmModal.cancelText"),
                                content: __("oro.security.share_scopes.confirmModal.content", {
                                    scope_name: $(el).parent().find('label').text().trim(),
                                    entity_name_plural: $('#oro_entity_config_type_entity_plural_label').val().trim(),
                                    entity_name: $('#oro_entity_config_type_entity_label').val().trim()
                                }),
                                className: 'modal oro-modal-danger',
                                okButtonClass: 'btn-primary btn-large',
                                handleClose: true
                            });
                            confirmModal.on('ok', function(){
                                anyElementChanged = true;
                            });
                            confirmModal.on('cancel', function(){
                                $(el).prop('checked', true);
                            });
                            confirmModal.on('close', function(){
                                $(el).prop('checked', true);
                            });
                            confirmModal.open();
                        }
                    });
                });
            });
        });
    </script>
{% endblock %}

{% block oro_share_select_widget %}
    {% import 'OroUIBundle::macros.html.twig' as UI %}
    {% import 'OroDataGridBundle::macros.html.twig' as dataGrid %}

    {% set isButtonsEnabled = not disabled and not read_only %}
    <div id="{{ id }}-el"
         {% if isButtonsEnabled %}class="entity-create-or-select-container"{% endif %}>
        <div {% if isButtonsEnabled %}class="input-append"{% endif %}>
            {{ form_widget(form) }}

            {% if isButtonsEnabled %}
                <button class="add-on btn entity-select-btn"
                        data-url="{{ path('oro_share_entities', {
                            entityClass: form.vars.entityClass
                        }) }}"
                        {{ UI.renderWidgetDataAttributes({
                            'type': 'dialog',
                            'multiple': true,
                            'options': {
                                'alias': 'sharing-entities-dialog',
                                'dialogOptions': {
                                    'title': 'oro.security.action.share_with'|trans,
                                    'allowMaximize': true,
                                    'allowMinimize': true,
                                    'modal': true,
                                    'dblclick': 'maximize',
                                    'maximizedHeightDecreaseBy': 'minimize-bar',
                                    'width': 1000,
                                    'height': 600
                                }
                            }
                        }) }}>
                    <i class="icon-bars"></i>
                </button>
            {% endif %}
        </div>
    </div>
    <h5 class="share-grid-title">{{ 'oro.security.datagrid.share_grid.title'|trans }}</h5>
    <div class="entity-create-or-select-container">
        {{ dataGrid.renderGrid(
            'share-grid',
            {'entityId': form.vars.entityId, 'entityClass': form.vars.entityClass},
            {'cssClass': 'share-grid'}
        ) }}
    </div>
    <script type="text/javascript">
        require(
            ['jquery', 'underscore', 'routing', 'oroui/js/mediator', 'oroui/js/widget-manager'],
            function ($, _, routing, mediator, widgetManager) {
                mediator.on('datagrid:mass:frontend:execute:share-grid', function (action) {
                    var grid = action.datagrid;
                    _.each(action.datagrid.getSelectionState().selectedModels, function (model) {
                        grid.collection.remove(model.id);
                    });
                    var entitiesParam = [];
                    _.each(grid.collection.models, function(model){
                        entitiesParam.push(model.id)
                    });
                    grid.collection.sync('POST', grid.collection, {
                        method: 'POST',
                        url: routing.generate(
                                'oro_share_update',
                                {
                                    'entityId': '{{ form.vars.entityId }}',
                                    '_widgetContainer': 'dialog'
                                }
                        ) + '&entityClass=' + '{{ form.vars.entityClass|url_encode }}',
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        data: 'oro_share_form%5BentityClass%5D={{ form.vars.entityClass|url_encode }}'
                        + '&oro_share_form%5BentityId%5D={{ form.vars.entityId }}'
                        + '&oro_share_form%5Bentities%5D=' + encodeURIComponent(entitiesParam.join(';')),
                        wait: true,
                        error: function () {
                            mediator.trigger('datagrid:doRefresh:share-grid');
                        },
                        success: function () {
                            mediator.trigger('datagrid:doRefresh:share-grid');
                        }
                    });
                    return;
                });
                mediator.on('datagrid:frontend:execute:share-grid', function (action) {
                    var collection = action.datagrid.collection;
                    collection.remove(action.model);
                    var entitiesParam = [];
                    _.each(collection.models, function(model){
                        entitiesParam.push(model.id)
                    });
                    action.model.destroy({
                        method: 'POST',
                        url: routing.generate(
                            'oro_share_update',
                            {
                                'entityId': '{{ form.vars.entityId }}',
                                '_widgetContainer': 'dialog'
                            }
                        ) + '&entityClass=' + '{{ form.vars.entityClass|url_encode }}',
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        data: 'oro_share_form%5BentityClass%5D={{ form.vars.entityClass|url_encode }}'
                              + '&oro_share_form%5BentityId%5D={{ form.vars.entityId }}'
                              + '&oro_share_form%5Bentities%5D=' + encodeURIComponent(entitiesParam.join(';')),
                        wait: true,
                        error: function () {
                            mediator.trigger('datagrid:doRefresh:share-grid');
                        },
                        success: function () {
                            mediator.trigger('datagrid:doRefresh:share-grid');
                        }
                    });
                });
                mediator.on('datagrid:share-grid:add:data', function (data) {
                    widgetManager.getWidgetInstanceByAlias('share-dialog', function (widget) {
                        var grid = widget.pageComponent('share-grid').grid;
                        var entitiesParam = [];
                        _.each(grid.collection.models, function(model){
                            entitiesParam.push(model.id)
                        });
                        _.each(data.models, function(model){
                            var id = JSON.stringify({
                                entityId: model.id,
                                entityClass: data.entityClass
                            });
                            grid.collection.add([
                                {
                                    entity: model.name,
                                    id: id
                                }
                            ]);
                            entitiesParam.push(id);
                        });
                        grid.collection.sync('POST', grid.collection, {
                            method: 'POST',
                            url: routing.generate(
                                    'oro_share_update',
                                    {
                                        'entityId': '{{ form.vars.entityId }}',
                                        '_widgetContainer': 'dialog'
                                    }
                            ) + '&entityClass=' + '{{ form.vars.entityClass|url_encode }}',
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                            data: 'oro_share_form%5BentityClass%5D={{ form.vars.entityClass|url_encode }}'
                            + '&oro_share_form%5BentityId%5D={{ form.vars.entityId }}'
                            + '&oro_share_form%5Bentities%5D=' + encodeURIComponent(entitiesParam.join(';')),
                            wait: true,
                            error: function () {
                                mediator.trigger('datagrid:doRefresh:share-grid');
                            },
                            success: function () {
                                mediator.trigger('datagrid:doRefresh:share-grid');
                            }
                        });
                    });
                });
                mediator.on('datagrid:share-grid:add:data-from-select2', function (data) {
                    widgetManager.getWidgetInstanceByAlias('share-dialog', function (widget) {
                        var grid = widget.pageComponent('share-grid').grid;
                        var entitiesParam = [];
                        _.each(grid.collection.models, function (model) {
                            entitiesParam.push(model.id)
                        });
                        grid.collection.add([
                            {
                                entity: data.text,
                                id: data.id
                            }
                        ]);
                        entitiesParam.push(data.id);
                        grid.collection.sync('POST', grid.collection, {
                            method: 'POST',
                            url: routing.generate(
                                    'oro_share_update',
                                    {
                                        'entityId': '{{ form.vars.entityId }}',
                                        '_widgetContainer': 'dialog'
                                    }
                            ) + '&entityClass=' + '{{ form.vars.entityClass|url_encode }}',
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                            data: 'oro_share_form%5BentityClass%5D={{ form.vars.entityClass|url_encode }}'
                            + '&oro_share_form%5BentityId%5D={{ form.vars.entityId }}'
                            + '&oro_share_form%5Bentities%5D=' + encodeURIComponent(entitiesParam.join(';')),
                            wait: true,
                            error: function () {
                                mediator.trigger('datagrid:doRefresh:share-grid');
                            },
                            success: function () {
                                mediator.trigger('datagrid:doRefresh:share-grid');
                            }
                        });
                    });
                });
            }
        );
    </script>
{% endblock %}
